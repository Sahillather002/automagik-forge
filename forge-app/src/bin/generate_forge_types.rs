use std::{env, fs, path::Path};

use anyhow::{Context, Result, bail};
use forge_config::{ForgeProjectSettings, ProjectConfig};
use forge_omni::{OmniConfig, OmniInstance, RecipientType, SendTextRequest, SendTextResponse};
use ts_rs::TS;

fn main() -> Result<()> {
    let args: Vec<String> = env::args().collect();
    let check_mode = args.iter().any(|arg| arg == "--check");

    let declarations = vec![
        ForgeProjectSettings::decl(),
        ProjectConfig::decl(),
        OmniConfig::decl(),
        RecipientType::decl(),
        OmniInstance::decl(),
        SendTextRequest::decl(),
        SendTextResponse::decl(),
    ];

    let body = declarations
        .into_iter()
        .map(|decl| {
            let trimmed = decl.trim_start();
            if trimmed.starts_with("export") {
                decl
            } else {
                format!("export {trimmed}")
            }
        })
        .collect::<Vec<_>>()
        .join("\n\n");

    let header = "// Forge extension TypeScript declarations\n// Generated by forge-app/src/bin/generate_forge_types.rs\n// Do not edit manually.\n\ntype JsonValue = any;\n";
    let content = format!("{header}\n{body}\n");

    let output_path = Path::new("shared/forge-types.ts");

    if check_mode {
        if !output_path.exists() {
            bail!(
                "{} missing; run `pnpm run generate-types`",
                output_path.display()
            );
        }
        let existing = fs::read_to_string(output_path).with_context(|| {
            format!(
                "failed to read {} during forge types check",
                output_path.display()
            )
        })?;
        if existing != content {
            bail!("forge types are out of date; run `pnpm run generate-types`");
        }
        println!("Forge types up to date");
    } else {
        fs::write(output_path, content)
            .with_context(|| format!("failed to write forge types to {}", output_path.display()))?;
        println!("Forge types written to {}", output_path.display());
    }

    Ok(())
}
